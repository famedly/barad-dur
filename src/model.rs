#[derive(Debug, serde::Deserialize, serde::Serialize, sqlx::FromRow, Clone)]
pub(crate) struct StatsReport {
    pub(crate) local_timestamp: chrono::DateTime<chrono::Utc>,
    pub(crate) remote_timestamp: Option<i64>,
    pub(crate) daily_active_e2ee_rooms: Option<i64>,
    pub(crate) daily_active_rooms: Option<i64>,
    pub(crate) daily_active_users: Option<i64>,
    pub(crate) daily_e2ee_messages: Option<i64>,
    pub(crate) daily_messages: Option<i64>,
    pub(crate) daily_sent_e2ee_messages: Option<i64>,
    pub(crate) daily_sent_messages: Option<i64>,
    pub(crate) daily_user_type_bridged: Option<i64>,
    pub(crate) daily_user_type_guest: Option<i64>,
    pub(crate) daily_user_type_native: Option<i64>,
    pub(crate) cpu_average: Option<i64>,
    pub(crate) event_cache_size: Option<i64>,
    pub(crate) memory_rss: Option<i64>,
    pub(crate) monthly_active_users: Option<i64>,
    pub(crate) r30_users_all: Option<i64>,
    pub(crate) r30_users_android: Option<i64>,
    pub(crate) r30_users_ios: Option<i64>,
    pub(crate) r30_users_electron: Option<i64>,
    pub(crate) r30_users_web: Option<i64>,
    pub(crate) total_nonbridged_users: Option<i64>,
    pub(crate) total_room_count: Option<i64>,
    pub(crate) total_users: Option<i64>,
    pub(crate) uptime_seconds: Option<i64>,
    pub(crate) cache_factor: Option<f64>,
    pub(crate) database_engine: Option<String>,
    pub(crate) database_server_version: Option<String>,
    pub(crate) homeserver: Option<String>,
    pub(crate) log_level: Option<String>,
    pub(crate) python_version: Option<String>,
    pub(crate) server_context: Option<String>,
    pub(crate) remote_addr: Option<String>,
    pub(crate) x_forwarded_for: Option<String>,
    pub(crate) user_agent: Option<String>,
}
