stages:
  - test
  - build
  - docker

cargo-test:
  stage: test
  image: rust:latest
  cache:
    paths:
      - target/
    key: build_cache
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends build-essential cmake
    - rustup component add clippy
    - rustup component add rustfmt
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo fmt -- --check
    - cargo check
    - cargo clippy
    - cargo test --all --verbose

cargo-build-amd64:
  stage: build
  image: rust:latest
  cache:
    paths:
      - target/
    key: build_cache
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends build-essential cmake
    - rustup component add clippy
    - rustup component add rustfmt
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --release
    - mv config.sample.yaml ./target/release/config.yaml
  artifacts:
    paths:
      - target/release/

.docker: &docker_template
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

docker-tags:
  <<: *docker_template
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+$/'
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

docker-branches:
  <<: *docker_template
  rules:
    - if: '$CI_COMMIT_BRANCH'
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
